# 각각 정해진 수의 식량이 있는 일직선으로 이어진 식량창고에서 얻을 수 있는 식량의 최대값?
# 서로 인접한 식량창고는 약탈할 수 없다.

# 풀이 전략
'''
    왼쪽 식량창고부터 차례로 턴다고 가정할 때 i번째 식량창고에 대해 생각해보면
    1. i-1번째 식량창고를 턴 경우 => i번째 식량창고를 털 수 없다.
    2. i-2번째 식량창고를 턴 경우 => i번째 식량창고를 털 수 있다.
    3. i-3번째부터는 무조건 i번째 식량창고를 털 수 있으므로 고려하지 않아도 된다.
    
    따라서, 해당 문제의 점화식은
    a(i) = max(a(i-2) + k(i), a(i-1))이 된다. (K는 식량창고의 식량 수)
'''
n = int(input())
k = list(map(int, input().split()))

cnt = [0] * n # 식량창고 수만큼 DP테이블 초기화

cnt[0] = k[0]
cnt[1] = max(k[0], k[1]) # 1번째와 2번째 중 식량 수가 더 많은 식량창고를 선택한다

# 3번째부터 위 풀이 전략의 점화식에 기반하여 더 많은 식량을 획득할 수 있는 식량창고를 선택해나간다
for i in range(2, n):
    cnt[i] = max(k[i] + cnt[i - 2], cnt[i - 1])

print(cnt[n-1])